.include "m328pdef.inc"  ; Incluimos las definiciones del microcontrolador con el que vamos a trabajar

         
.org 0x0000			 ;Inicializamos la direcciones de memoria donde iniciara el programa
rjmp Reset			 ; y las interrupciones
.ORG 0x0002
RJMP Button1Pressed
.ORG 0x0004
RJMP Button2Pressed

.def temp = r16			; Definimos algumas variables globales para no mezclar registros
.def button_state = r17		; mientras programamos
.def row = r26
.def figure = r27
.def led_state = r20
.def counter = r24
.def fig2 = r25

Reset:
    ldi temp, high(RAMEND)
    out SPH, temp
    ldi temp, low(RAMEND)
    out SPL, temp

   
    ldi temp, 0xFF
    out DDRB, temp
    out DDRC, temp

  
    ldi temp, 0xf0
    out DDRD, temp
    sbi PORTD, 2
    sbi PORTD, 3


    ldi led_state, 0x00
    out PORTB, led_state
    ldi counter, 0

     ;configuramos las interrupciones
    LDI R18, 0X03
    OUT EIMSK, R18 ;habilita las interrupciones INT0 e INT1
    LDI R19, 0x0F
    STS EICRA, R19 ; configura flancos de subida

    rjmp MainLoop

letraN:  					; Comenzamos a codificar los registros que formaran las filas y columnas de la letra N 
    ldi fig2, 0b01000000
    ldi row,0x00
    ldi figure,0b00111110
    out PORTB,row
    out PORTC, figure
    out PORTD,fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x01
    ldi figure,0b00111100
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x02
    ldi figure,0b00111010
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x03
    ldi figure,0b00110110
    out PORTB,row
    out PORTC,figure
    out PORTD,fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x04
    ldi figure,0b00101110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x05
    ldi figure,0b00011110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b00000000
    ldi row,0x06
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x07
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

letraA:						; Comenzamos a codificar los registros que formaran las filas y columnas de la letra A 
    ldi fig2, 0b11000000
    ldi row,0x00
    ldi figure,0b00000011
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x01
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x02
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x03
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x04
    ldi figure,0b00000001
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x05
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay


    ldi fig2, 0b10000000
    ldi row,0x06
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x07
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

letraG:					; Comenzamos a codificar los registros que formaran las filas y columnas de la letra G 
    ldi fig2, 0b10000000
    ldi row,0x00
    ldi figure,0b00000000
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x01
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x02
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x03
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x04
    ldi figure,0b00000010
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x05
    ldi figure,0b00111010
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x06
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x07
    ldi figure,0b00000000
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

atajoA:
    rjmp letraA
atajoY:
    rjmp letraY
atajoN:
    rjmp letraN
atajoO:
    rjmp letraO
atajoM:
    rjmp letraM
atajoR:
    rjmp letraR
atajoG:
    rjmp letraG

MainLoop:
   
    in button_state, PIND
    andi button_state, (1 << PD2)  ; Check only PD2


    cpi button_state, 0
    brne Button1Pressed

    in button_state, PIND
    andi button_state, (1 << PD3)

    cpi button_state, 0
    brne Button2pressed

    cpi counter, 0
    breq letraU
    cpi counter, 1
    breq atajoR
    cpi counter, 2
    breq letraU
    cpi counter, 3
    breq atajoG
    cpi counter, 4
    breq letraU
    cpi counter, 5
    breq atajoA
    cpi counter, 6
    breq atajoY
    cpi counter, 7
    breq atajoN
    cpi counter, 8
    breq atajoO
    cpi counter, 9
    breq atajoM
    cpi counter, 10
    breq atajoA
	cpi counter, 11
    breq resetcounter

  
    rjmp MainLoop

Button1Pressed:
    inc counter
    reti

Button2Pressed:
    dec counter
    reti

resetcounter:
    ldi counter, 0
    rjmp MainLoop

letraU:					; Comenzamos a codificar los registros que formaran las filas y columnas de la letra U
    ldi fig2, 0b01000000
    ldi row, 0x00
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x01
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x02
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x03
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x04
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x05
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row, 0x06
    ldi figure, 0b00111110
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row, 0x07
    ldi figure, 0b00000001
    out PORTB, row
    out PORTC, figure
    out PORTD, fig2
    rcall delay

    ret

letraR:						; Comenzamos a codificar los registros que formaran las filas y columnas de la letra R
    ldi fig2, 0b11000000
    ldi row,0x00
    ldi figure,0b00100001
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x01
    ldi figure,0b00011101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x02
    ldi figure,0b00011101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x03
    ldi figure,0b00011101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x04
    ldi figure,0b00100001
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x05
    ldi figure,0b00110101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x06
    ldi figure,0b00101101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x07
    ldi figure,0b00011101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

letraY:						; Comenzamos a codificar los registros que formaran las filas y columnas de la letra Y 
    ldi fig2, 0b01000000
    ldi row,0x00
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x01
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x02
    ldi figure,0b00011011
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x03
    ldi figure,0b00100111
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x04
    ldi figure,0b00110111
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x05
    ldi figure,0b00111011
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x06
    ldi figure,0b00111101
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b11000000
    ldi row,0x07
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

letraO:						; Comenzamos a codificar los registros que formaran las filas y columnas de la letra O 
    ldi fig2, 0b10000000
    ldi row,0x00
    ldi figure,0b00000001
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x01
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x02
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x03
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x04
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x05
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x06
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b10000000
    ldi row,0x07
    ldi figure,0b00000001
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

letraM:						; Comenzamos a codificar los registros que formaran las filas y columnas de la letra M 
    ldi fig2, 0b01000000
    ldi row,0x00
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b00000000
    ldi row,0x01
    ldi figure,0b00111100
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x02
    ldi figure,0b00011010
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x03
    ldi figure,0b00100110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x04
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x05
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x06
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ldi fig2, 0b01000000
    ldi row,0x07
    ldi figure,0b00111110
    out PORTB,row
    out PORTC,figure
    out PORTD, fig2
    rcall delay

    ret

delay: ldi r23, 50 ; Cargar el valor inicial en r23
loop3: ldi r22, 20 ; Cargar el valor inicial en r22
loop2: ldi r21, 10 ; Cargar el valor inicial en r21
loop1: dec r21 ; Decrementar r21
       brne loop1 ; Si r21 != 0, saltar al siguiente bucle
       dec r22 ; Decrementar r22
       brne loop2 ; Si r22 != 0, saltar al siguiente bucle
       dec r23 ; Decrementar r23
       brne loop3 ; Si r23 != 0, saltar al siguiente bucle
       ret ; Regresar de la subrutina

